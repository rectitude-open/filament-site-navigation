<?php

declare(strict_types=1);

namespace RectitudeOpen\FilamentSiteNavigation\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Nette\PhpGenerator\Dumper;
use Nette\PhpGenerator\PhpFile;
use RectitudeOpen\FilamentSiteNavigation\Models\SiteNavigation;

class GenerateNavigationRoutes extends Command
{
    protected $signature = 'nav:generate-routes';

    protected $description = 'Generate web routes from active navigation entries.';

    protected array $usedRouteNames = [];

    public function handle()
    {
        $this->usedRouteNames = [];
        $file = new PhpFile;
        $file->addComment('This file is auto-generated by the nav:generate-routes command.');
        $file->addComment('Do not edit directly.');
        $file->setStrictTypes();
        $file->addUse('Illuminate\Support\Facades\Route');

        $navigations = SiteNavigation::active()->ordered()->get();
        $routesToProcess = [];

        // Step 1: Collect all routes with priority metadata
        foreach ($navigations as $nav) {
            $parentPath = trim($nav->path, '/');

            if (! empty($nav->child_routes)) {
                foreach ($nav->child_routes as $childPattern => $childControllerAction) {
                    if (empty($childPattern) || empty($childControllerAction) || ! str_contains($childControllerAction, '@')) {
                        continue;
                    }
                    $isDynamic = str_contains($childPattern, '{');
                    $routesToProcess[] = [
                        'path' => $parentPath . '/' . trim($childPattern, '/'),
                        'action' => $this->formatAction($childControllerAction),
                        'routeName' => $this->generateRouteName($childControllerAction, $nav->id),
                        'parameters' => null,
                        'priority' => $isDynamic ? 2 : 1,
                    ];
                }
            }

            if ($nav->controller_action && str_contains($nav->controller_action, '@')) {
                $routesToProcess[] = [
                    'path' => $parentPath,
                    'action' => $this->formatAction($nav->controller_action),
                    'routeName' => $this->generateRouteName($nav->controller_action, $nav->id),
                    'parameters' => $nav->route_parameters,
                    'priority' => 3,
                ];
            }
        }

        // Step 2: Sort the collected routes
        usort($routesToProcess, function ($a, $b) {
            if ($a['priority'] !== $b['priority']) {
                return $a['priority'] <=> $b['priority'];
            }

            return strlen($b['path']) <=> strlen($a['path']);
        });

        // Step 3: Generate the route file from the sorted array
        $dumper = new Dumper;
        $routesBody = '';
        foreach ($routesToProcess as $routeData) {
            $path = addslashes($routeData['path']);
            $routeName = addslashes($routeData['routeName']);

            $routeLine = "Route::get('{$path}', [{$routeData['action']}])->name('{$routeName}')";
            if (! empty($routeData['parameters'])) {
                $exportedParams = $dumper->dump($routeData['parameters']);
                $routeLine .= "->defaults('parameters', {$exportedParams})";
            }
            $routesBody .= $routeLine . ";\n";
        }

        $content = (string) $file . "\n" . $routesBody;
        File::put(base_path('routes/web_generated.php'), $content);
        $this->info('Generated routes file routes/web_generated.php successfully.');
    }

    private function generateRouteName(string $controllerAction, int $navId): string
    {
        if (! str_contains($controllerAction, '@')) {
            return 'generated.' . $navId;
        }

        [$class, $method] = explode('@', $controllerAction);
        $baseClassName = class_basename($class);
        $prefix = strtolower(str_replace('Controller', '', $baseClassName));
        $routeName = "{$prefix}.{$method}";

        if (in_array($routeName, $this->usedRouteNames, true)) {
            $routeName .= '.' . $navId;
        }
        $this->usedRouteNames[] = $routeName;

        return $routeName;
    }

    private function formatAction(string $action): string
    {
        [$class, $method] = explode('@', $action);
        $escapedMethod = addslashes($method);

        return '\\' . $class . "::class, '{$escapedMethod}'";
    }
}
