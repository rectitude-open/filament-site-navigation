<?php

declare(strict_types=1);

namespace RectitudeOpen\FilamentSiteNavigation\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Nette\PhpGenerator\PhpFile;
use RectitudeOpen\FilamentSiteNavigation\Models\SiteNavigation;

class GenerateNavigationRoutes extends Command
{
    protected $signature = 'nav:generate-routes';

    protected $description = 'Generate web routes from active navigation entries.';

    public function handle()
    {
        $file = new PhpFile;
        $file->addComment('This file is auto-generated by the nav:generate-routes command.');
        $file->addComment('Do not edit directly.');
        $file->setStrictTypes();
        $file->addUse('Illuminate\Support\Facades\Route');
        $navigations = SiteNavigation::where('is_active', true)->get();
        $routesBody = '';
        foreach ($navigations as $nav) {
            if (! $nav->controller_action) {
                continue;
            }

            $path = trim($nav->path, '/');
            $action = $this->formatAction($nav->controller_action);
            $routeLine = "Route::get('{$path}', [{$action}])->name('nav.{$nav->id}')";
            if ($nav->route_parameters) {
                foreach ($nav->route_parameters as $key => $value) {
                    $escapedValue = addslashes($value);
                    $routeLine .= "->defaults('{$key}', '{$escapedValue}')";
                }
            }
            $routesBody .= $routeLine . ";\n";
            if ($nav->child_route_pattern && $nav->child_controller_action) {
                $childPath = $path . '/' . trim($nav->child_route_pattern, '/');
                $childAction = $this->formatAction($nav->child_controller_action);
                $routesBody .= "Route::get('{$childPath}', [{$childAction}])->name('nav.{$nav->id}.child');\n";
            }
        }
        $content = (string) $file . "\n" . $routesBody;
        File::put(base_path('routes/web_generated.php'), $content);
        $this->info('Generated routes file routes/web_generated.php successfully.');
    }

    private function formatAction(string $action): string
    {
        [$class, $method] = explode('@', $action);

        return '\\' . $class . "::class, '{$method}'";
    }
}
