<?php

declare(strict_types=1);

namespace RectitudeOpen\FilamentSiteNavigation\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\File;
use Nette\PhpGenerator\PhpFile;
use RectitudeOpen\FilamentSiteNavigation\Models\SiteNavigation;

class GenerateNavigationRoutes extends Command
{
    protected $signature = 'nav:generate-routes';

    protected $description = 'Generate web routes from active navigation entries.';

    protected array $usedRouteNames = [];

    public function handle()
    {
        $this->usedRouteNames = [];

        $file = new PhpFile;
        $file->addComment('This file is auto-generated by the nav:generate-routes command.');
        $file->addComment('Do not edit directly.');
        $file->setStrictTypes();
        $file->addUse('Illuminate\Support\Facades\Route');
        $navigations = SiteNavigation::where('is_active', true)->get();
        $routesBody = '';

        foreach ($navigations as $nav) {
            if (! $nav->controller_action) {
                continue;
            }

            $path = trim($nav->path, '/');
            $action = $this->formatAction($nav->controller_action);
            $routeName = $this->generateRouteName($nav->controller_action, $nav->id);

            $routeLine = "Route::get('{$path}', [{$action}])->name('{$routeName}')";
            if (! empty($nav->route_parameters)) {
                $exportedParams = var_export($nav->route_parameters, true);
                $routeLine .= "->defaults('parameters', {$exportedParams})";
            }
            $routesBody .= $routeLine . ";\n";

            if ($nav->child_route_pattern && $nav->child_controller_action) {
                $childPath = $path . '/' . trim($nav->child_route_pattern, '/');
                $childAction = $this->formatAction($nav->child_controller_action);
                $childRouteName = $this->generateRouteName($nav->child_controller_action, $nav->id);
                $routesBody .= "Route::get('{$childPath}', [{$childAction}])->name('{$childRouteName}');\n";
            }
        }

        $content = (string) $file . "\n" . $routesBody;
        File::put(base_path('routes/web_generated.php'), $content);
        $this->info('Generated routes file routes/web_generated.php successfully.');
    }

    private function generateRouteName(string $controllerAction, int $navId): string
    {
        if (! str_contains($controllerAction, '@')) {
            return 'generated.' . $navId;
        }

        [$class, $method] = explode('@', $controllerAction);
        $baseClassName = class_basename($class);
        $prefix = strtolower(str_replace('Controller', '', $baseClassName));

        $routeName = "{$prefix}.{$method}";

        if (in_array($routeName, $this->usedRouteNames, true)) {
            $routeName .= '.' . $navId;
        }

        $this->usedRouteNames[] = $routeName;

        return $routeName;
    }

    private function formatAction(string $action): string
    {
        [$class, $method] = explode('@', $action);

        return '\\' . $class . "::class, '{$method}'";
    }
}
